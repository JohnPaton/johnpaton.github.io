<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>John Paton</title><link>https://johnpaton.net/</link><description>&lt;b style="color:#3aa500;margin-right:2px"&gt;/&lt;/b&gt;data&lt;b style="color:#3aa500;margin-right:2px;margin-left:2px"&gt;/&lt;/b&gt;scientist</description><lastBuildDate>Sun, 23 Jun 2019 19:00:00 -0100</lastBuildDate><item><title>Generating fake whiskey reviews with GPT-2</title><link>https://johnpaton.net/posts/whiskey-reviews/</link><description>&lt;p&gt;I've enjoyed whiskey for a while now, but I can never vocalize all the flavors present in a bottle. I read all these flowery reviews and tasting notes online and I just have no idea how these people come up with &lt;a href="http://whiskyadvocate.com/ratings-reviews/?search=Johnnie+Walker+Blue+Label&amp;amp;submit=+&amp;amp;brand_id=0&amp;amp;rating=0&amp;amp;price=0&amp;amp;category=0&amp;amp;styles_id=0&amp;amp;issue_id=0"&gt;descriptions like&lt;/a&gt; "caramels, dried peats, elegant cigar smoke, seeds scraped from vanilla beans, brand new pencils, peppercorn, coriander seeds, and star anise"... until now.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Sun, 23 Jun 2019 19:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2019-06-23:/posts/whiskey-reviews/</guid><category>python</category><category>deep learning</category><category>natural language</category></item><item><title>Redirect standard out to Python's logging module with contextlib</title><link>https://johnpaton.net/posts/redirect-logging/</link><description>&lt;p&gt;Python's logging functionality is very nice once you get the hang of it, but many people either disagree or don't bother to use it. Learn how to redirect other people's pesky print statements into your nice logging setup.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Wed, 22 May 2019 17:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2019-05-22:/posts/redirect-logging/</guid><category>python</category><category>snippets</category></item><item><title>Propagate time series events with Pandas merge_asof</title><link>https://johnpaton.net/posts/propagate-time-series-events-pandas/</link><description>&lt;p&gt;I recently discovered that Pandas has a function to propagate time series events forward (or backward) in time across a DataFrame. Here's how it works.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Sat, 13 Apr 2019 16:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2019-04-13:/posts/propagate-time-series-events-pandas/</guid><category>python</category><category>data</category><category>time series</category><category>pandas</category></item><item><title>Getting Calvin home on time: a statistics puzzle</title><link>https://johnpaton.net/posts/calvin-puzzle/</link><description>&lt;p&gt;I found this puzzle a while ago and couldn't get it out of my head, so I decided to write up a solution. "Calvin has to cross several signals when he walks from his home to school. Each of these signals operate independently. They alternate every 80 seconds between green light and red light. At each signal, there is a counter display that tells him how long it will be before the current signal light changes. Calvin has a magic wand which lets him turn a signal from red to green instantaneously. However, this wand comes with limited battery life, so he can use it only for a specified number of times."&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Thu, 19 Jul 2018 17:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2018-07-19:/posts/calvin-puzzle/</guid><category>python</category><category>statistics</category><category>puzzles</category></item><item><title>Remapping the world with word vectors</title><link>https://johnpaton.net/posts/remapping-the-world/</link><description>&lt;p&gt;Everyone is used to the map. Most people could make a reasonable attempt at drawing one from memory (well, &lt;a href="https://www.theatlantic.com/international/archive/2014/01/what-you-get-when-30-people-draw-a-world-map-from-memory/282901/"&gt;sort of&lt;/a&gt;). But what would it look like if we positioned the countries not by geographical location, but by our own perceived relationships between them? Armed with Conceptnet Numberbatch, I decided to try just that.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Sat, 02 Dec 2017 19:34:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-12-02:/posts/remapping-the-world/</guid><category>natural language</category><category>dataviz</category><category>d3.js</category></item><item><title>Cleaner Spark UDF definitions with a little decorator</title><link>https://johnpaton.net/posts/clean-spark-udfs/</link><description>&lt;p&gt;One of the handy features that makes (Py)Spark more flexible than database tools like Hive even for just transforming tabular data is the ease of creating User Defined Functions (UDFs). However, one thing that still remains a little annoying is that you have to separately define a function and declare it as a UDF. With four lines of code you can clean those definitions right up.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Thu, 16 Nov 2017 19:48:11 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-11-16:/posts/clean-spark-udfs/</guid><category>spark</category><category>python</category><category>data</category><category>snippets</category></item><item><title>Forward-fill missing data in Spark</title><link>https://johnpaton.net/posts/forward-fill-spark/</link><description>&lt;p&gt;Since I've started using Apache Spark, one of the frequent annoyances I've come up against is having an idea that would be very easy to implement in Pandas, but turns out to require a really verbose workaround in Spark. A recent example of this is doing a forward fill (filling &lt;code&gt;null&lt;/code&gt; values with the last known non-&lt;code&gt;null&lt;/code&gt; value).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Fri, 22 Sep 2017 20:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-09-22:/posts/forward-fill-spark/</guid><category>python</category><category>spark</category><category>data</category><category>pandas</category><category>time series</category></item><item><title>Creating a responsive bar chart for my tags</title><link>https://johnpaton.net/posts/responsive-bar-chart/</link><description>&lt;p&gt;Today I decided that, since I'm a data kind of guy, I would like my tags page to show a bar chart of how many posts per tag I've made. The idea was to basically have a list of tags on the left, with a bar chart on the right showing how many articles are tagged with that tag, and the bars scaling to the window size. It turned out to be more complicated than I was expecting.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Fri, 21 Jul 2017 23:30:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-07-21:/posts/responsive-bar-chart/</guid><category>web</category><category>css</category><category>pelican</category><category>jinja</category></item><item><title>Groupby without aggregation in Pandas</title><link>https://johnpaton.net/posts/groupby-without-aggregation/</link><description>&lt;p&gt;Pandas has a useful feature that I didn't appreciate enough when I first started using it: &lt;code&gt;groupby&lt;/code&gt;s without aggregation. What do I mean by that? Let's look at an example.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Mon, 17 Jul 2017 20:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-07-17:/posts/groupby-without-aggregation/</guid><category>python</category><category>pandas</category><category>data</category><category>time series</category></item><item><title>Counting the number of periods since time-series events with Pandas</title><link>https://johnpaton.net/posts/periods-since-time-series-events/</link><description>&lt;p&gt;This is a cute trick I discovered the other day for quickly computing the time since an event on regularly spaced time series data (like monthly reporting), without looping over the data.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Sat, 15 Jul 2017 20:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-07-15:/posts/periods-since-time-series-events/</guid><category>python</category><category>pandas</category><category>data</category><category>time series</category></item><item><title>Custom color schemes in Matplotlib</title><link>https://johnpaton.net/posts/custom-color-schemes-in-matplotlib/</link><description>&lt;p&gt;At KPMG, like (I imagine) at most companies, we have a custom color palette that presentations and other materials are supposed to conform to. I actually quite like it when things I produce have a consistent look and feel, so I decided to find out how to make a custom color palette in &lt;a href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. Turns out that it's super easy.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Thu, 11 May 2017 20:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-05-11:/posts/custom-color-schemes-in-matplotlib/</guid><category>python</category><category>dataviz</category><category>matplotlib</category></item><item><title>engl_ish: Simulate your language. ish.</title><link>https://johnpaton.net/posts/engl_ish/</link><description>&lt;p&gt;Quite a while ago I saw a short film called &lt;a href="https://www.youtube.com/watch?v=Vt4Dfa4fOEY"&gt;Skwerl&lt;/a&gt;, meant to demonstrate "how English sounds to non-English speakers". As a native English speaker, watching it is quite surreal. The sounds and accents are totally familiar, and there are definitely words in there that you recognize, but there is no discernible overall meaning whatsoever. It's actually kind of hard to listen to. All you've got to hang onto is that what you're hearing somehow &lt;em&gt;feels&lt;/em&gt; like English. And that's the point. Skwerl gave me the idea to attempt to create a similar effect, but with reading instead of listening. I wanted to see how English looks to non-English readers. And so I created &lt;code&gt;engl_ish&lt;/code&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Paton</dc:creator><pubDate>Sat, 04 Feb 2017 20:00:00 -0100</pubDate><guid isPermaLink="false">tag:johnpaton.net,2017-02-04:/posts/engl_ish/</guid><category>python</category><category>markov</category><category>natural language</category></item></channel></rss>